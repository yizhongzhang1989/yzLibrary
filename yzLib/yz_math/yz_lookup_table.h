/***********************************************************/
/**	\file
	\brief		Lookup Table
	\details	This file contain several lookup tables to 
				loopup value in a very efficient way
	\author		Yizhong Zhang
	\date		7/15/2012
*/
/***********************************************************/
#ifndef __YZ_LOOKUP_TABLE_H__
#define __YZ_LOOKUP_TABLE_H__

namespace yz{

/**
	Optimal Hash Table Size

	http://planetmath.org/goodhashtableprimes
*/
static const unsigned int hash_table_size[] = {
	53, 97, 193, 389, 769, 1543, 3079, 6151, 12289, 24593, 
	49157, 98317, 196613, 393241, 786433, 1572869, 3145739, 6291469, 12582917, 25165843, 
	50331653, 100663319, 201326611, 402653189, 805306457, 1610612741
};


/**
	Bit Reverse Table of unsigned char

	given an unsigned char, get its inverse in bits

	Bit Twiddling Hacks:
	http://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious
*/
static const unsigned char BitReverseTableUC[256] = 
{
#	define BRTUC_R2(n)     n,     n + 2*64,     n + 1*64,     n + 3*64
#	define BRTUC_R4(n)	BRTUC_R2(n), BRTUC_R2(n + 2*16), BRTUC_R2(n + 1*16), BRTUC_R2(n + 3*16)
#	define BRTUC_R6(n)	BRTUC_R4(n), BRTUC_R4(n + 2*4 ), BRTUC_R4(n + 1*4 ), BRTUC_R4(n + 3*4 )
	BRTUC_R6(0), BRTUC_R6(2), BRTUC_R6(1), BRTUC_R6(3)
};

/**
	A talbe contain shuffled numbers 0 - 255

	this table is generated by std::random_shuffle 255-0
*/
static const unsigned char ShuffledSequenceTableUC[256] = 
{
	0xCD, 0xF0, 0xA2, 0xE2, 0xED, 0x88, 0xE3, 0x98, 
	0xBC, 0x66, 0xC1, 0x7C, 0xF4, 0xDB, 0x47, 0x96, 
	0xF6, 0x6C, 0x5E, 0x11, 0xAF, 0x2F, 0x40, 0x42, 
	0x41, 0x07, 0xDE, 0x4C, 0x8A, 0x63, 0x4D, 0x51, 
	0xC0, 0x9B, 0x38, 0x27, 0x19, 0x03, 0x97, 0x65, 
	0x3D, 0x44, 0xAC, 0xA7, 0x18, 0xA0, 0x61, 0x13, 
	0xB3, 0xB4, 0xC6, 0x21, 0x15, 0xE0, 0xC5, 0x0F, 
	0x78, 0xC4, 0xEF, 0x2C, 0x53, 0x26, 0x2E, 0x67, 
	0x54, 0x5F, 0xD5, 0xC8, 0xAA, 0x17, 0x46, 0x95, 
	0xA3, 0x94, 0xFB, 0xBA, 0xD3, 0xBD, 0x64, 0x2A, 
	0xBF, 0x34, 0x48, 0x35, 0x43, 0xD7, 0xF5, 0xCF, 
	0x90, 0x92, 0x2D, 0xB5, 0x5D, 0x93, 0x99, 0x50, 
	0x74, 0x72, 0x31, 0x04, 0x58, 0x10, 0x5A, 0x7F, 
	0xFF, 0xCA, 0x55, 0x37, 0xB2, 0xDD, 0xE5, 0x0A, 
	0x0D, 0x69, 0xB1, 0x3A, 0x00, 0x3C, 0xEA, 0x22, 
	0x32, 0x8D, 0xF2, 0x9C, 0x86, 0x1C, 0xB0, 0x76, 
	0x30, 0x01, 0xD2, 0x06, 0xBB, 0x77, 0xF3, 0x80, 
	0xE8, 0xA6, 0x05, 0xEC, 0x89, 0x49, 0xFD, 0xD9, 
	0xD6, 0xD4, 0x45, 0x6F, 0x4F, 0xB8, 0x33, 0x57, 
	0xD8, 0x87, 0xA8, 0x9E, 0xF9, 0x5C, 0x23, 0xB6, 
	0x6B, 0xEB, 0x7E, 0x1F, 0x02, 0xFE, 0x85, 0xE9, 
	0x12, 0xC9, 0xAE, 0x08, 0x9F, 0x52, 0x25, 0x71, 
	0x09, 0x3F, 0x29, 0x68, 0x3B, 0x1A, 0xE7, 0x91, 
	0x59, 0x7A, 0x6E, 0x8E, 0x56, 0xA4, 0x1D, 0x1E, 
	0xA9, 0x9A, 0xDF, 0x70, 0x8C, 0x4E, 0x4B, 0xDC, 
	0xEE, 0x36, 0x8F, 0xC3, 0x83, 0x82, 0xE4, 0x8B, 
	0x79, 0x6D, 0x0C, 0xA1, 0x7D, 0x39, 0x4A, 0xBE, 
	0xFA, 0xAB, 0xD1, 0xC7, 0x28, 0x7B, 0xCC, 0xF7, 
	0xB7, 0xAD, 0x62, 0xB9, 0xD0, 0xF8, 0xF1, 0x0E, 
	0x1B, 0xCB, 0xDA, 0xE6, 0x2B, 0x60, 0x16, 0xC2, 
	0x81, 0x0B, 0x73, 0xA5, 0x20, 0x84, 0x5B, 0x24, 
	0x9D, 0x75, 0xE1, 0xCE, 0x14, 0x6A, 0x3E, 0xFC
};

/**
	Inverse table of ShuffledSequenceTableUC

	By looking up this table, we can get the position in ShuffledSequenceTableUC.

	Note that this table is also a shuffled sequence lookup table
*/
static const unsigned char InverseShuffledSequenceTableUC[256] = 
{
	0x74, 0x81, 0xA4, 0x25, 0x63, 0x8A, 0x83, 0x19, 
	0xAB, 0xB0, 0x6F, 0xF1, 0xD2, 0x70, 0xE7, 0x37, 
	0x65, 0x13, 0xA8, 0x2F, 0xFC, 0x34, 0xEE, 0x45, 
	0x2C, 0x24, 0xB5, 0xE8, 0x7D, 0xBE, 0xBF, 0xA3, 
	0xF4, 0x33, 0x77, 0x9E, 0xF7, 0xAE, 0x3D, 0x23, 
	0xDC, 0xB2, 0x4F, 0xEC, 0x3B, 0x5A, 0x3E, 0x15, 
	0x80, 0x62, 0x78, 0x96, 0x51, 0x53, 0xC9, 0x6B, 
	0x22, 0xD5, 0x73, 0xB4, 0x75, 0x28, 0xFE, 0xB1, 
	0x16, 0x18, 0x17, 0x54, 0x29, 0x92, 0x46, 0x0E, 
	0x52, 0x8D, 0xD6, 0xC6, 0x1B, 0x1E, 0xC5, 0x94, 
	0x5F, 0x1F, 0xAD, 0x3C, 0x40, 0x6A, 0xBC, 0x97, 
	0x64, 0xB8, 0x66, 0xF6, 0x9D, 0x5C, 0x12, 0x41, 
	0xED, 0x2E, 0xE2, 0x1D, 0x4E, 0x27, 0x09, 0x3F, 
	0xB3, 0x71, 0xFD, 0xA0, 0x11, 0xD1, 0xBA, 0x93, 
	0xC3, 0xAF, 0x61, 0xF2, 0x60, 0xF9, 0x7F, 0x85, 
	0x38, 0xD0, 0xB9, 0xDD, 0x0B, 0xD4, 0xA2, 0x67, 
	0x87, 0xF0, 0xCD, 0xCC, 0xF5, 0xA6, 0x7C, 0x99, 
	0x05, 0x8C, 0x1C, 0xCF, 0xC4, 0x79, 0xBB, 0xCA, 
	0x58, 0xB7, 0x59, 0x5D, 0x49, 0x47, 0x0F, 0x26, 
	0x07, 0x5E, 0xC1, 0x21, 0x7B, 0xF8, 0x9B, 0xAC, 
	0x2D, 0xD3, 0x02, 0x48, 0xBD, 0xF3, 0x89, 0x2B, 
	0x9A, 0xC0, 0x44, 0xD9, 0x2A, 0xE1, 0xAA, 0x14, 
	0x7E, 0x72, 0x6C, 0x30, 0x31, 0x5B, 0x9F, 0xE0, 
	0x95, 0xE3, 0x4B, 0x84, 0x08, 0x4D, 0xD7, 0x50, 
	0x20, 0x0A, 0xEF, 0xCB, 0x39, 0x36, 0x32, 0xDB, 
	0x43, 0xA9, 0x69, 0xE9, 0xDE, 0x00, 0xFB, 0x57, 
	0xE4, 0xDA, 0x82, 0x4C, 0x91, 0x42, 0x90, 0x55, 
	0x98, 0x8F, 0xEA, 0x0D, 0xC7, 0x6D, 0x1A, 0xC2, 
	0x35, 0xFA, 0x03, 0x06, 0xCE, 0x6E, 0xEB, 0xB6, 
	0x88, 0xA7, 0x76, 0xA1, 0x8B, 0x04, 0xC8, 0x3A, 
	0x01, 0xE6, 0x7A, 0x86, 0x0C, 0x56, 0x10, 0xDF, 
	0xE5, 0x9C, 0xD8, 0x4A, 0xFF, 0x8E, 0xA5, 0x68
};

/**
	Sequential Display Color

	arranged in RGB
*/
static const int SequentialDisplayColor[256] = 
{
	0xFF0000,	0x00FF00,	0x0000FF,	0xFFFF00,	0x00FFFF,	0xFF00FF,	0x90DEAD,	0x9F7262,
	0x48AA9E,	0x42FB40,	0x3F21D8,	0x04B383,	0x188C50,	0xDBF8B0,	0x9C96EA,	0x39C3C3,
	0xBF2688,	0x46CBC8,	0xDD979E,	0xC4DC91,	0x9D161C,	0x87F9F8,	0x135CB6,	0x5DB6EE,
	0xE43484,	0xC8A9E3,	0x269B97,	0xEADA0A,	0x203BC7,	0xF949DC,	0x115C9E,	0x92723C,
	0xE06264,	0xACB122,	0xF9E5B2,	0x953E82,	0x5BF530,	0x398773,	0xDDEAB2,	0x3EC10A,
	0x21D7C8,	0xCB0373,	0x26E79D,	0xD33755,	0x66FAA7,	0x8DC6AC,	0x5630D8,	0x76BA99,
	0x3E2816,	0xEF8475,	0x9E8B07,	0x036A64,	0x578371,	0x6EE4D4,	0xC21A7E,	0xD31B4B,
	0x5978EE,	0x09AA85,	0x7FFFA7,	0x5E0D31,	0xFA6354,	0x2D9CDF,	0x1BF7D7,	0x4C2633,
	0xE78A33,	0x4850A0,	0x416CCC,	0xF7FF00,	0x32CCBC,	0x612976,	0xE43AEC,	0x5BC6CA,
	0xD34451,	0x0DC0A8,	0x059316,	0xF1399C,	0x6D801D,	0x5C894F,	0x7B7E2D,	0x35AEE6,
	0x059BD7,	0x8B1FBB,	0x280CF3,	0x421F44,	0x8CE16A,	0xE5DB80,	0x4BBAAD,	0x96FDF4,
	0xEA3D68,	0xBF51CB,	0xC36DC1,	0x964F0E,	0xE1F667,	0xADA7F7,	0x407208,	0xF0A082,
	0xF13660,	0x3CA266,	0xA37E6B,	0x3B6E2A,	0xDA4421,	0xF42FAA,	0x37246F,	0x2609CB,
	0xE7F700,	0x2AB1E9,	0x5ACB91,	0xE8CFDA,	0x38ECE7,	0x0AD7AA,	0x425BB0,	0x587102,
	0x0FB7A4,	0x15955E,	0xAA22DE,	0x712AB9,	0x4BB9AA,	0x267BCA,	0x9C3668,	0xFDB0FF,
	0xFFFE7D,	0xA80150,	0x5DA041,	0xF2DA52,	0xD612C8,	0x8E7CC0,	0x736A32,	0x7FBDF8,
	0x26F7A5,	0x831B61,	0x3617A1,	0x99307C,	0xC2105A,	0x1A51FF,	0x4D8E80,	0x8BCAB0,
	0x45B86B,	0xE0E5B2,	0xDD39EF,	0xFA426A,	0x421F71,	0xFFD06D,	0xCCA762,	0x35F571,
	0xAE68B6,	0x78778B,	0x6FD2DE,	0xBC4896,	0x7D9B70,	0x8269F9,	0x916DF4,	0x375055,
	0x17C396,	0x2BADFA,	0xB8D061,	0x134369,	0x15D33B,	0xB71E85,	0xA22AE4,	0x6191C5,
	0x68F62B,	0x1FD245,	0xE11681,	0xA60B47,	0x6A633E,	0x002C2B,	0xAD003A,	0x9E0B2B,
	0x9E6FBF,	0x0EC73D,	0xBE7C7D,	0xC75F23,	0xAFEB1B,	0x7BE547,	0x0398C3,	0x36D9C0,
	0xE31007,	0x1D003D,	0x4C43E1,	0x75BB66,	0x846221,	0x4F7B3F,	0x022648,	0xE8DB21,
	0x70957C,	0x815EE0,	0x427A8D,	0x87F3ED,	0xCD010F,	0x138EC9,	0x5332AB,	0x043099,
	0x59B575,	0x7BF4CD,	0x7F984B,	0x491447,	0xF506D0,	0x9EDE76,	0x12959A,	0x74AA63,
	0xAACBAD,	0x49B5AB,	0x7B02C3,	0xC48140,	0x0AEE0E,	0xDFA5ED,	0x21115A,	0xAB2CEB,
	0x4BB1A4,	0xC8D7A3,	0x5F38D0,	0x878083,	0xDCE393,	0x7DCB20,	0x8DFFD1,	0x2083D6,
	0xD1DAD8,	0x6A407A,	0xD9C460,	0x5BC4E9,	0xB12984,	0x72DC8E,	0xC3D1F7,	0xC91053,
	0xDCC447,	0x50D828,	0x06B059,	0xFBE8CA,	0x44EEEB,	0x9C7ACB,	0x1ED2E9,	0x296BB7,
	0x5935DA,	0xEE7E49,	0x29CC74,	0xFB2D0C,	0x465630,	0x81436A,	0x8EC51E,	0xECDEF0,
	0x73E015,	0x5B7905,	0xE0996A,	0x5D5143,	0x0942C9,	0xF4BF05,	0x5F2EE2,	0x429CD4,
	0x6A9687,	0x68FF80,	0xA5F844,	0xBFD14D,	0x3FDAF1,	0x165F10,	0x47E2C0,	0x3FFD43
};

}	//	namespace yz

#endif	//	__YZ_LOOKUP_TABLE_H__